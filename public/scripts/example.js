/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// var Comment = React.createClass({
//   rawMarkup: function() {
//     var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
//     return { __html: rawMarkup };
//   },

//   render: function() {
//     return (
//       <div className="comment">
//         <h2 className="commentAuthor">
//           {this.props.author}
//         </h2>
//         <span dangerouslySetInnerHTML={this.rawMarkup()} />
//       </div>
//     );
//   }
// });

// var CommentBox = React.createClass({
//   loadCommentsFromServer: function() {
//     $.ajax({
//       url: this.props.url,
//       dataType: 'json',
//       cache: false,
//       success: function(data) {
//         this.setState({data: data});
//       }.bind(this),
//       error: function(xhr, status, err) {
//         console.error(this.props.url, status, err.toString());
//       }.bind(this)
//     });
//   },
//   handleCommentSubmit: function(comment) {
//     var comments = this.state.data;
//     // Optimistically set an id on the new comment. It will be replaced by an
//     // id generated by the server. In a production application you would likely
//     // not use Date.now() for this and would have a more robust system in place.
//     // comment.id = Date.now();
//     console.log('comment',comment);
//     var newComments = comments.concat([comment]);
//     this.setState({data: newComments});
//     $.ajax({
//       url: this.props.url,
//       dataType: 'json',
//       type: 'POST',
//       data: comment,
//       success: function(data) {
//         this.setState({data: data});
//       }.bind(this),
//       error: function(xhr, status, err) {
//         this.setState({data: comments});
//         console.error(this.props.url, status, err.toString());
//       }.bind(this)
//     });
//   },
//   getInitialState: function() {
//     return {data: []};
//   },
//   componentDidMount: function() {
//     this.loadCommentsFromServer();
//     setInterval(this.loadCommentsFromServer, this.props.pollInterval);
//   },
//   render: function() {
//     return (
//       <div className="commentBox">
//         <h1>Comments</h1>
//         <CommentList data={this.state.data} />
//         <CommentForm onCommentSubmit={this.handleCommentSubmit} />
//       </div>
//     );
//   }
// });

// var CommentList = React.createClass({
//   render: function() {
//     var commentNodes = this.props.data.map(function(comment) {
//       return (
//         <Comment author={comment.author} key={comment.id}>
//           {comment.text}
//         </Comment>
//       );
//     });
//     return (
//       <div className="commentList">
//         {commentNodes}
//       </div>
//     );
//   }
// });

// var CommentForm = React.createClass({
//   getInitialState: function() {
//     return {author: '', text: ''};
//   },
//   handleAuthorChange: function(e) {
//     this.setState({author: e.target.value});
//   },
//   handleTextChange: function(e) {
//     this.setState({text: e.target.value});
//   },
//   handleSubmit: function(e) {
//     e.preventDefault();
//     var author = this.state.author.trim();
//     var text = this.state.text.trim();
//     if (!text || !author) {
//       return;
//     }
//     this.props.onCommentSubmit({author: author, text: text});
//     this.setState({author: '', text: ''});
//   },
//   render: function() {
//     return (
//       <form className="commentForm" onSubmit={this.handleSubmit}>
//         <input
//           type="text"
//           placeholder="Your name"
//           value={this.state.author}
//           onChange={this.handleAuthorChange}
//         />
//         <input
//           type="text"
//           placeholder="Say something..."
//           value={this.state.text}
//           onChange={this.handleTextChange}
//         />
//         <input type="submit" value="Post" />
//       </form>
//     );
//   }
// });

var seriesOptions = [],
    seriesCounter = 0,
    names = ['MSFT', 'AAPL', 'GOOG'];

var socket = io();
socket.emit('connect_catchup');

/**
 * Create the chart when all data is loaded
 * @returns {undefined}
 */
function createChart() {

    Highcharts.stockChart('container', {

        rangeSelector: {
            selected: 4
        },

        yAxis: {
            labels: {
                formatter: function () {
                    return (this.value > 0 ? ' + ' : '') + this.value + '%';
                }
            },
            plotLines: [{
                value: 0,
                width: 2,
                color: 'silver'
            }]
        },

        plotOptions: {
            series: {
                compare: 'percent',
                showInNavigator: true
            }
        },

        tooltip: {
            pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.change}%)<br/>',
            valueDecimals: 2,
            split: true
        },

        series: seriesOptions
    });
}


class TickerBox extends React.Component {
  constructor(props){
    super(props);
    this.state={tickerlist:[],newticker:""};
    socket.on('connect_catchup_fromserver', (data) => {
      this.updateTickerList(data);
    })
  }
  updateTickerList(data){
    this.setState({tickerlist: data})
  }
  removeticker(ticker){
    var newtickers = this.state.tickerlist
    var idx = newtickers.indexOf(ticker)
    if (idx >= 0) {
      newtickers.splice(idx,1)
      // this.setState({tickerlist:newtickers})
      console.log('removing ' + ticker,idx)
      socket.emit('delete_ticker',ticker)
    }
    
  }
  handlechange(x){
    console.log(x)
    this.setState({newticker:x.target.value})
  }
  render(){
    var names = this.state.tickerlist
    console.log(names)
    seriesCounter = 0
    seriesOptions = []
    $.each(names, function (i, name) {
      console.log(name)
        $.getJSON('https://app.sentieo.com/api/fetch_graph_data/?graphtype=stock&apikey=40d01664d790bffde8c79f77329f866eec56dc64d61fd210cf7e437948f6d30c&ticker=' + name.toLowerCase() + '&pagetype=realtool&counter=2',    function (data) {
            seriesOptions[i] = {
                name: name,
                data: data.result.series[0].series
            };

            // As we're loading the data asynchronously, we don't know what order it will arrive. So
            // we keep a counter and create the chart when all the data is loaded.
            seriesCounter += 1;
            // console.log("seriesCounter",seriesCounter)
            if (seriesCounter === names.length) {
                createChart();
            }
        });
    });
    return (
      <div className="container">
        <ul className="row list-unstyled">
        {this.state.tickerlist.map((x,i) => {
         return (
           <li className="col-md-4" key={i}>
            <div className="thumbnail"> <span className="close" onClick={() => this.removeticker(x)}>Ã—</span>
                 <h3>{x}</h3>
                <p>Thumbnail caption...</p>
            </div>
           </li>
         )
        })}
           <li className="col-md-4" key="addticker">
            <div className="thumbnail">
                 <h3>Add Ticker</h3>
                <div class="form-group" onsubmit={() => this.addticker()}>
                  <input type="text" class="form-control" id="addticker" placeholder="e.g. TWTR" value={this.state.newticker} onChange={this.handlechange.bind(this)}/>
                  <button type="submit" class="btn btn-primary" onClick={() => {socket.emit("add_ticker",this.state.newticker);this.setState({newticker:""})}}>Submit</button>
                </div>
            </div>
           </li>
        </ul>
      </div>
    )
  }
}

// $(".close").click(function(){
//   console.log('closing')
//   var $target = $(this).parents('li');
//   $target.hide('slow', function(){ $target.remove(); });
// })

ReactDOM.render(
  <TickerBox url="/api/tickers" pollInterval={5000} />,
  document.getElementById('content')
);
